This talk is called Professional JavaScript; it's designed for people who write JavaScript professionally.
My goal is to find the sweet spot in the spectrum from "I copied this from javascript.com and it works" to "What is the abstract syntax tree for this memoized closure?"

"Wat" lightning talk
https://www.destroyallsoftware.com/talks/wat
http://stackoverflow.com/questions/9032856/can-anyone-explain-these-bizarre-javascript-behaviours-mentioned-in-the-wat-ta/9033306#9033306

Further Reading:
1. JavaScript: The Good Parts - Douglas Crockford (read twice, then once you've read it twice read it again)
2. JavaScript Patterns - Stoyan Stefanov
3. http://developer.yahoo.com/performance/
4. How a browser works http://www.html5rocks.com/en/tutorials/internals/howbrowserswork/

People to listen to:
> Douglas Crockford
> Stoyan Stefanov / YUI Performance Team
> Steve Souders
> Paul Irish - chrome, jquery, html5rocks team
> John Resig (he can get a little too abstract)


"Let's talk about optimizations."
Don't be penny-wise and pound-foolish.
Concat and minimize files.  Yes, you need to be doing this.
work your way down the list; prioritize the most expensive stuff first (HTTP requests!)
scripts at the bottom; CSS at the top

I don't use coffeescript or LESS - old timer?  Or just don't need the syntax crutch

"There will be cursing in this talk, because some shit is just dumb."

You basically never need to modify the prototype unless you're building objects that need to be constructed (ie: a framework)

Data structures are your friend!  Show example of menu as a JS array vs markup (angle bracket tax)

always do these things:
> always force browsers into standards mode (recommend <!doctype html> in 2012)
> <script> tag usage


How to structure your pages
Show off UltimateCentral structure
The problems of global scope are the same as regular scope
List of "nevers" from The Good Parts + personal tips ( var foo = function() )
"Mostly never" vs "never never"



Lesson1 - everything is an object
> object definition, show syntax examples
> functions are objects
> integers are objects
> strings are objects
> arrays are objects
> objects are objects
> don't do this shit - don't modify the global objects (exception: "enhancing" up to ECMA5)

Lesson2 - everything executes within an object scope
> show 3-layer hoisting example
> "this" example
> "var that = this;" example
> use "this" in the global scope; show how it's on the window object

Lesson3 - how prototypical inheritance works
> create 2 objects, one with .prototype and one without (.prototype doesn't create another instance in memory)
> create object, change one value, change the prototype, show how it's changed one object but not another (hoisting)

Lesson4 - things to know about functions
> required args and optional object

Lesson5 - things to know about strings
> 

Lesson6 - module pattern
> think in terms of scope; you're creating an isolated scope for your operation and exporting things out of that scope

Lesson7 - constructor pattern
> capitilize the first letter convention; any variable in javascript that starts with a capital letter should be a constructor (exception: CONSTANTS)
> write the object interface first; work backwards from there
> put functions in .prototype where possible

Lesson8 - What is JSON, really?
> JSON is a subset of JavaScript
> JSON is a fantastic interchange format

--- up to this point, everything has been pure JS ---

Lesson9 - The DOM
> Document Object Model - it's exactly what it sounds like.  representation of the document tree using JS objects
> show side by side JS and HTML
> browser exposes properties - they are not consistent
> use a framework to interact with the DOM
> Show native DOM properties vs framework abstracted DOM manipulation
> "Do you know all the universal properties off the top of your head? No? Then use a framework"

Lesson10 - The Browser
> browser gives us global functions and other methods (HTTPRequest, WebSockets, etc)

Lesson11 - DOM Events
> explain the event loop
> show how events work
> explain event delgation

"Tips from the trenches"
> Create Global namespace for your project; put your shit in there
> anonymous scope for the page-level stuff, "export" event handlers out of that scope
> rename files on publish to bust cacheing
> always prefer explicit to implicit (type conversion, naming, etc)
> "smart data, stupid code"  use data structures where possible.  especially frontend code should be full of data structures
> event delegation
> exit functions as early as possible (show a long if block vs early return / continue)